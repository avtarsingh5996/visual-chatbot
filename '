AWSTemplateFormatVersion: '2010-09-09'
Resources:
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.9
      Timeout: 30
      MemorySize: 1024
      Code:
        S3Bucket: !Sub "visual-chatbot-deployment-${AWS::AccountId}"
        S3Key: lambda.zip
      Environment:
        Variables:
          APPSYNC_API_ID: !Ref AppSyncApi

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Service: lambda.amazonaws.com }
            Action: sts:AssumeRole
      Policies:
        - PolicyName: BedrockPollyS3DynamoDBAppSync
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                  - polly:SynthesizeSpeech
                  - s3:PutObject
                  - dynamodb:PutItem
                  - appsync:GraphQL
                  - logs:*
                Resource: '*'

  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: VisualChatBotAPI

  ApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    DependsOn: ApiGateway  # Explicit dependency to ensure ApiGateway exists
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: chat

  ApiGatewayMethod:
    Type: AWS::ApiGateway::Method
    DependsOn: ApiGatewayResource  # Ensure resource exists before method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ApiGatewayResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - "arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${FunctionArn}/invocations"
          - Region: !Ref AWS::Region
            FunctionArn: !GetAtt LambdaFunction.Arn

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: ApiGatewayMethod
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: prod

  AudioBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: visual-chatbot-audio
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        IgnorePublicAcls: false
        BlockPublicPolicy: false
        RestrictPublicBuckets: false

  FrontendBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: visual-chatbot-frontend
      WebsiteConfiguration:
        IndexDocument: index.html

  ChatHistoryTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ChatHistory
      AttributeDefinitions:
        - AttributeName: request_id
          AttributeType: S
      KeySchema:
        - AttributeName: request_id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  AppSyncApi:
    Type: AWS::AppSync::GraphQLApi
    Properties:
      Name: VisualChatBotAppSync
      AuthenticationType: API_KEY

  AppSyncSchema:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId: !Ref AppSyncApi
      Definition: |
        type Response {
          response: String!
          audioUrl: String!
          lipSync: AWSJSON!
        }
        type Query {
          dummy: String
        }
        type Mutation {
          publishResponse(response: String!, audioUrl: String!, lipSync: AWSJSON!): Response
        }
        type Subscription {
          onResponse: Response
          @aws_subscribe(mutations: ["publishResponse"])
        }
        schema {
          query: Query
          mutation: Mutation
          subscription: Subscription
        }

  AppSyncApiKey:
    Type: AWS::AppSync::ApiKey
    Properties:
      ApiId: !Ref AppSyncApi

Outputs:
  ApiUrl:
    Value: !Sub
      - "https://${ApiId}.execute-api.${Region}.amazonaws.com/prod/chat"
      - ApiId: !Ref ApiGateway
        Region: !Ref AWS::Region
  FrontendUrl:
    Value: !Sub
      - "http://${BucketName}.s3-website-${Region}.amazonaws.com"
      - BucketName: !Ref FrontendBucket
        Region: !Ref AWS::Region
  AppSyncEndpoint:
    Value: !GetAtt AppSyncApi.GraphQLUrl
  AppSyncApiKey:
    Value: !Ref AppSyncApiKey
